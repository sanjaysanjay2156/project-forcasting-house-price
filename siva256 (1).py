# -*- coding: utf-8 -*-
"""siva256.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vjxFmKORgR9d8Rqrmn8fwzxY-siYhRIZ
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd
df = pd.read_csv('Housing.csv')
df.head()

print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
df.info()
df.describe()

print("Missing Values:\n", df.isnull().sum())
print("Duplicate Rows:", df.duplicated().sum())

import seaborn as sns
import matplotlib.pyplot as plt
sns.histplot(df['price'], kde=True)
plt.title('Distribution of House Prices')
plt.show()
sns.scatterplot(x='area', y='price', data=df)
plt.title('Area vs Price')
plt.show()

categorical_cols = df.select_dtypes(include=['object']).columns
df_encoded = pd.get_dummies(df, drop_first=True)

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_encoded.drop('price', axis=1))
y = df_encoded['price']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

from sklearn.metrics import mean_squared_error, r2_score

y_pred = model.predict(X_test)
print("MSE:", mean_squared_error(y_test, y_pred))
print("R¬≤ Score:", r2_score(y_test, y_pred))

# Replace with actual column names from your dataset
new_house = {
    'area': 3000,
    'bedrooms': 3,
    'bathrooms': 2,
    'stories': 2,
    'mainroad': 'yes',
    'guestroom': 'no',
    'basement': 'yes',
    'hotwaterheating': 'no',
    'airconditioning': 'yes',
    'parking': 1,
    'prefarea': 'no',
    'furnishingstatus': 'furnished'
}
new_df = pd.DataFrame([new_house])
df_temp = pd.concat([df.drop('price', axis=1), new_df], ignore_index=True)
df_temp_encoded = pd.get_dummies(df_temp, drop_first=True)
df_temp_encoded = df_temp_encoded.reindex(columns=df_encoded.drop('price', axis=1).columns, fill_value=0)
new_input_scaled = scaler.transform(df_temp_encoded.tail(1))
predicted_price = model.predict(new_input_scaled)
print("üí∞ Predicted House Price:", round(predicted_price[0], 2))

!pip install gradio

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import StandardScaler
import gradio as gr

# Load the data
df = pd.read_csv("/content/drive/MyDrive/Housing.csv")

# One-hot encoding
df_encoded = pd.get_dummies(df, drop_first=True)

# Features and target
X = df_encoded.drop("price", axis=1)
y = df_encoded["price"]

# Scale features
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# Train model
model = LinearRegression()
model.fit(X_train, y_train)

# Save column structure
columns = X.columns

# Define prediction function
def predict_price(area, bedrooms, bathrooms, stories, mainroad, guestroom, basement,
                  hotwaterheating, airconditioning, parking, prefarea, furnishingstatus):

    # Form input dict
    input_dict = {
        'area': area,
        'bedrooms': bedrooms,
        'bathrooms': bathrooms,
        'stories': stories,
        'mainroad': mainroad,
        'guestroom': guestroom,
        'basement': basement,
        'hotwaterheating': hotwaterheating,
        'airconditioning': airconditioning,
        'parking': parking,
        'prefarea': prefarea,
        'furnishingstatus': furnishingstatus
    }

    # Convert to DataFrame and encode
    input_df = pd.DataFrame([input_dict])
    temp_df = pd.concat([df.drop("price", axis=1), input_df], ignore_index=True)
    temp_encoded = pd.get_dummies(temp_df, drop_first=True)
    temp_encoded = temp_encoded.reindex(columns=columns, fill_value=0)

    # Scale and predict
    input_scaled = scaler.transform(temp_encoded.tail(1))
    prediction = model.predict(input_scaled)[0]

    return round(prediction, 2)

# Define interface inputs
inputs = [
    gr.Number(label="Area (sq ft)"),
    gr.Number(label="Bedrooms"),
    gr.Number(label="Bathrooms"),
    gr.Number(label="Stories"),
    gr.Dropdown(["yes", "no"], label="Main Road Access"),
    gr.Dropdown(["yes", "no"], label="Guest Room"),
    gr.Dropdown(["yes", "no"], label="Basement"),
    gr.Dropdown(["yes", "no"], label="Hot Water Heating"),
    gr.Dropdown(["yes", "no"], label="Air Conditioning"),
    gr.Number(label="Parking Spaces"),
    gr.Dropdown(["yes", "no"], label="Preferred Area"),
    gr.Dropdown(["furnished", "semi-furnished", "unfurnished"], label="Furnishing Status")
]

# Create the interface
gr.Interface(
    fn=predict_price,
    inputs=inputs,
    outputs=gr.Number(label="Predicted House Price"),
    title="üè† House Price Prediction App",
    description="Enter the house features to estimate its price."
).launch()

